package com.example.eduwebsite.service;import com.example.eduwebsite.dao.UserRepository;import com.example.eduwebsite.dto.AddressDto;import com.example.eduwebsite.dto.RegisterDto;import com.example.eduwebsite.entity.Address;import com.example.eduwebsite.entity.User;import com.example.eduwebsite.mail.EmailService;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import java.util.*;import java.util.stream.Collectors;@Slf4j@Servicepublic class RegisterService {    @Autowired    private UserRepository userRepository;    @Autowired    private BCryptPasswordEncoder passwordEncoder;    @Autowired    private EmailService emailService;    private User mapToUserEntity(RegisterDto studentDto) {        User student = new User();        student.setFirstName(studentDto.getFirstName());        student.setLastName(studentDto.getLastName());        student.setEmail(studentDto.getEmail());        student.setMobileNo(studentDto.getMobileNo());        // Encrypt the password        student.setPassword(passwordEncoder.encode(studentDto.getPassword()));        student.setIsVerified(false); // Default to false on registration        // Map addresses        List<Address> addressList = new ArrayList<>();        if (studentDto.getAddresses() != null) {            for (AddressDto addressDto : studentDto.getAddresses()) {                Address address = new Address();                address.setAddressLine(addressDto.getStreet());                address.setCity(addressDto.getCity());                address.setState(addressDto.getState());                address.setZip(addressDto.getZipCode());                address.setCountry(addressDto.getCountry());                addressList.add(address);            }        }        System.out.println(student);        student.setAddresses(addressList);        System.out.println(addressList);        return student;    }    public boolean completeRegistration(String email, String otp) {        Optional<User> userOpt = userRepository.findByEmail(email);        if (userOpt.isPresent()) {            User user = userOpt.get();            // Validate OTP from the database            if (user.getOtp().equals(otp) && !user.getIsVerified()) {                user.setIsVerified(true);                userRepository.save(user);                return true;            }        }        return false;    }    private String generateOtp() {        Random rand = new Random();        return String.format("%06d", rand.nextInt(1000000));    }    public User login(String email, String password) {        User user = userRepository.findByEmail(email)                .orElseThrow(() -> new RuntimeException("User not found"));        // Check if the user is verified        if (!user.getIsVerified()) {            throw new RuntimeException("User is not verified. Please check your email for the OTP.");        }        if (!passwordEncoder.matches(password, user.getPassword())) {            throw new RuntimeException("Invalid password");        }        return user; // Successful login    }    public void initiateRegistration(RegisterDto studentDto) {        // Check if the user already exists        log.info("initiateRegistration");        if (userRepository.findByEmail(studentDto.getEmail()).isPresent()) {            throw new RuntimeException("User already exists with this email: " + studentDto.getEmail());        }        // Create user entity        User student = mapToUserEntity(studentDto);        log.info("student: " + student);        // Send OTP via email        String otp = generateOtp();        student.setOtp(otp);        System.out.println(otp);        emailService.sendEmail(student.getEmail(), "Verify your email", "Your OTP is: " + otp);        student.setIsVerified(false);        // Save student with addresses        userRepository.save(student);    }    // search users    public List<User> searchUsers(String name, String email, String phone) {        List<User> users = userRepository.findAll();        return users.stream()                .filter(user -> (name == null || user.getFirstName().contains(name) || user.getLastName().contains(name)) &&                        (email == null || user.getEmail().contains(email)) &&                        (phone == null || user.getMobileNo().contains(phone)))                .collect(Collectors.toList()                );    }    // Search addresses by criteria    public List<Address> searchAddresses(String city, String state, String country) {        List<User> users = userRepository.findAll();        List<Address> addresses = new ArrayList<>();        for (User user : users) {            addresses.addAll(user.getAddresses());        }        return addresses.stream()                .filter(address -> (city == null || address.getCity().contains(city)) &&                        (state == null || address.getState().contains(state)) &&                        (country == null || address.getCountry().contains(country)))                .collect(Collectors.toList());    }}